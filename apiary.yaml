openapi: 3.0.0
info:
  version: '1.0'
  title: "Photo Amenous"
  description: 'Service for sharing locations to take photos.'
  license:
    name: MIT
servers:
  - url: http://assignments-api.herokuapp.com.com/api/v1
    description: Heroku
  - url: http://localhost:3000/api/v1
    description: Localhost
paths:
  /locations/:id:
    get:
      description: >-
        Gets information about a specific location, identified by an ID
      summary: Get a location
      parameters:
        - in: path
          name: id
          schema:
            type: String
          required: true
          description: 'ID of the requested location'
      responses:
        '200':
          description: 'The location corresponding to the input ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '404':
          description: 'Insert ID doesn`t exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
  /locations:
    get:
      description: >-
        Gets information about all existing locations
      summary: Get all locations
      parameters: 
        category:
          type: string
          description: 'filter for category'
        city:
          type: string
          description: 'filter for city'
        raggiungibilita:
          type: string
          description: 'filter for reachability'
        order:
          type: string
          description: 'order method'
      responses:
        '200':
          description: 'All the existing locations'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '404':
          description: 'There are no existing locations'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
    post:
      description: >-
        Creates a new location.
      summary: Create a new location
      requestBody:
        content:
          multpart/form-data:
            schema:
              type: object
              required:
                - name
                - address
                - city
                - description
                - category
                - raggiungibilita
                - locationImage
                - photoDesc
                - hour
                - date
              properties:
                _id:
                  type: mongoose.Schema.Types.ObjectId
                  description: 'ID of the location in database'
                name:
                  type: string
                  description: 'name of the location'
                address:
                  type: string
                  description: 'address of the location'
                city:
                  type: string
                  description: 'city of the location'
                description:
                  type: string
                  description: 'description of the location'
                category:
                  type: string
                  description: 'category of the location'
                raggiungibilita:
                  type: array[string]
                  description: 'one or more reachability methods of the location'
                locationImage:
                  type: mongoose.Schema.Types.ObjectId
                  description: '_id of the location s image'
                  schema: $ref '#/components/schemas/imageScheme/'
                photoDesc:
                  type: string
                  description: 'description of the location s image'
                hour:
                  type: string
                  description: 'hour of the location s image'
                date:
                  type: string
                  description: 'date of the location s image'
      responses:
        '201':
          description: 'Location created.'
          headers:
            content:
              application/json:
                schema:
                  message:
                    type: string
                    description: 'Location created'
                  createdLocation:
                    type: object
                    properties:
                      _id:
                        type: mongoose.Schema.Types.ObjectId
                        description: 'id of the created location'
                      name:
                        type: string
                        description: 'name of the created location'
                type: 
                description: message of success.
        '500':
          description: 'Error in creating a new location.'
          headers:
            content:
            application/json:
              schema:
                type: string
                description: message of error.
    patch:
      description: >-
        Changes any value of a location
      summary: Change values of location
      parameters:
        id: mongoose.Types.ObjectId
      requestBody:
        content:
          application/json:

      responses:
        '200':
          description: 'Location pathced'
        '500':
          description: 'Error in patching location'
  /lib/favourites/:
    get:
      description: >-
        Gets favourites of 1 user
      summary: Get all locations in favourites of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - token
              properties:
              token:
                  type: string
                  description: 'Token of the user'
      responses:
        '200':
          description: 'All the existing favourites of user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourites'
        '404':
          description: 'User has no favourites'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourites'
    delete:
      description: >-
        Deletes all favourites of 1 user, removes user from favourites table
      summary: Delete all locations in favourites of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - token
              properties:
                token:
                  type: string
                  description: 'Token of the user'
      responses:
        '200':
          description: 'All favourite of a user deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourites'
  /lib/favourites/add/:id:
    patch:
      description: >-
        Add one location as favourite of 1 user
      summary: Add one location as favourite of 1 user
      parameters:
        - in: id of location
          name: id
          schema:
            type: mongoose.Types.ObjectId
          required: true
          description: 'ID of the location to add'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: 'Token of the user'
      responses:
        '200':
          description: 'Favourite added with success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourites'
        '409':
          description: 'Location is already in user`s favourites'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourites'
  /lib/favourites/remove/:id:
    patch:
      description: >-
        Remove one location as favourite of 1 user
      summary: Remove one location as favourite of 1 user
      parameters:
        - in: id of location
          name: id
          schema:
            type: mongoose.Types.ObjectId
          required: true
          description: 'ID of the location to remove'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: 'Token of the user'
      responses:
        '200':
          description: 'Favourite deleted for user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourites'
  /user/signup:
    post:
      description: >-
        Creates a new user in the system.
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - username
                - email
                - password
              properties:
                _id:
                  type: objectId
                  description: 'Id of the user'
                username:
                  type: string
                  description: 'Username that will be shown in the site'
                email:
                  type: string
                  description: 'Email address of the user'
                password:
                  type: string
                  description: 'Password to access to the account'
      responses:                                                         
        '201':
          description: 'User created'
          headers:
              schema:
                type: string
              description: message of success.
        '500':
          description: 'Error in creating a new user'
          headers:
            content:
            application/json:
              schema:
                type: string
                description: message of error.
        '422':
          description: 'User already exist'
          headers:
            content:
            application/json:
              schema:
                type: string
                description: message of error.
  /user/:id:
    delete:
      description: >-
         Deletes a particular user.
      summary: Delete a user
      parameters:
      - in: path
        name: id
        schema:
          type: String
          description: 'id of the report'
        content:
          application/json:
            schema:
      responses:
        '200':
          description: 'User deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: 'Error'
          content:
            application/json:
              schema:
              type: string
              description: "message of error"
  /user/login:
    post:
      description: >-
        Logs a user
      summary: Logs a user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
      responses:
        '200':
          description: 'User logged in'
          headers:
            'message':
              schema:
                type: string
                description: 'Auth successful'
        '401':
          description: 'User not logged in'
          headers:
            'message':
              schema:
                type: string
                description: 'Auth failed'
        '500':
          description: 'User not logged in'
          headers:
            'message':
              schema:
                type: string
                description: 'Auth failed'
  /report:
    post:
      description: >-
        Creates a new report in the system.
      summary: Save a report from a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - _id
                - email
                - text
                - id_picture
              properties:
                id:
                  type: objectId
                  description: 'Id of the user'
                email:
                  type: string
                  description: 'email of the user of created the report'
                text:
                  type: string
                  description: 'The reason for the report'
                id_picture:
                  type: String
                  description: 'id of the picture that was reported'
      responses:                                                       
        '201':
          description: 'Report created'
          headers:
            'Report':
              schema:
                type: string
              description: Message of report sent with success.
        '500':
          description: 'Error in creating a new report'
          headers:
            content:
            application/json:
              schema:
                type: string
                description: Message of error.
  /report/:id:
    get:
      description: >-
          Get a specific report.
      summary: Get a specific report.
      parameters:
        - in: path
          name: id
          schema:
            type: String
            description: 'id of the report'
      responses:
        '200':
           description: 'Report of the passed id '
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Report'
        '404':
           description: 'Error'
           content:
             application/json:
               schema:
                 type: string
                 description: "message of error"
  /checkReports:
    get:
      description: >-
        Gets all the reports in the system.
      summary: Gets all the reports.
      responses:                                                       
        '200':
          description: 'All the existing report'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '404':
          description: 'there are not existing reports'
          content:
            application/json:
              schema:
                type: string
                description: message of error
components:
  schemas:
    User:
      userScheme:
        type: object
        required:
          - id
          - username
          - email
          - password
        properties:
          username:
            type: String
            description: 'Name of the location'
          email:
            type: String
            description: 'Email of the user'
          password:
            type: String
            description: 'Password of the user'
    Location:
      locationSchema:
      type: object
      required:
        - id
        - name
        - address
        - city
        - description
        - category
        - raggiungibilita
        - locationImage
        - photoImage
        - photoDesc
        - hour
        - date
      properties:
        _id:
          type: mongoose.Schema.Types.ObjectId
          description: 'ID of the location'
        name:
          type: string
          description: 'name of the location'
        address:
          type: string
          description: 'address of the location'
        city:
          type: string
          description: 'city of the location'
        description:
          type: string
          description: 'description of the location'
        category:
          type: string
          description: 'category of the location'
        raggiungibilita:
          type: array[string]
          description: 'raggiungibilita of the location'
        raggiungibilita:
          type: array[string]
          description: 'one or more reachability methods of the location'
        locationImage:
          type: mongoose.Schema.Types.ObjectId
          description: '_id of the location s image'
          reference: 'Image'
        photoDesc:
          type: string
          description: 'description of the location s image'
        hour:
          type: string
          description: 'hour of the location s image'
        date:
          type: string
          description: 'date of the location s image'
        like:
          type: number
          description: 'number of persons that find location useful'
    imageScheme:
      type: object
      required:
        - img
      properties:
        _id:
          type: mongoose.Schema.Types.ObjectId
          description: 'ID of the image'
        img:
          type: object
          content:
            data:
              type: buffer
              description: 'Buffer of the image data'
            contentType:
              type: string
              description: 'type of the image'
    Report:
      reportScheme:
        type: object
        required:
          - _id
          - email
          - text
          - id_picture
        properties:
          _id:
            type: String
            description: 'ID of the location'
          email:
            type: string
            description: 'email of the user of created the report'
          text:
            type: String
            description: 'Content of the report'
          id_picture:
            type: String
            description: 'id of the picture that was reported'
    Favourites:
      favoruiteScheme:
      type: object
      properties:
        _id:
          type: mongoose.Schema.Types.ObjectId
          description: 'ID of the User'
        favourites:
          type: Array of mongoose.Schema.Types.ObjectId
          description: 'List of Locations` ids'
      
